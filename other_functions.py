import tracemalloc

import numpy as np

from postgres import query_postgre








def column_breakdown(row_array, col_array, entry_array, col_amount, col_headers, col_to_row):
    '''
    :param colums_array: –ø–æ –∫–∞–∫–∏–º —Å—Ç–æ–ª–±—Ü–∞–º —Ä–∞–∑–±–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏
    :param entry_array: –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
    :param col_amount: –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–ø–∏—Å–µ–π entry_array –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
    :param col_headers: –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–ø–∏—Å–µ–π entry_array –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    :param col_to_row: –≤ –∫–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–ø–∏—Å–µ–π entry_array –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —à–∞–±–ª–æ–Ω–µ –∏–∑ 0
    '''

    entry_array = np.array(entry_array)
    col_array = np.array(col_array)
    row_array = np.array(row_array)
    if entry_array.size > 0 and col_array.size > 0 and row_array.size > 0:
        # 1–π —Å—Ç–æ–ª–±–µ—Ü - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–ø–∏—Å–µ–π
        result = row_array
        # —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ 0 - –∫—É–¥–∞ –±—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
        nf = [0 for _ in result]
        for _ in col_array:
            result=np.c_[result, nf]

        for e in entry_array:
            col_in = np.where(e[col_headers] == col_array)[0][0]
            row_in = np.where(e[col_to_row] == result[:, col_to_row])[0][0]
            result[row_in, col_in+1] = e[col_amount]
        return result
    else:
        return None

#
#
# PRODUCT_NAME_WAITING = ['üçï', 'üçî', 'üöö']
# open_sessions= [
#         ['–ë–ö2', '20', 'üçï'],
#         ['–ë–ö2', '20', 'üçî'],
#         ['–ë–ö3', '30', 'üöö'],
#         ['–ë–ö5', '20', 'üçî']]
#
# now_waiting_status = column_breakdown(PRODUCT_NAME_WAITING, open_sessions, 1, 2, 0)
# print(now_waiting_status)
# # delivery_burger = np.sum(now_waiting_status[:, 1].astype(int), now_waiting_status[:, 3].astype(int))
# delivery_burger = now_waiting_status[:, 1].astype(int) + now_waiting_status[:, 3].astype(int)
# print(delivery_burger)




# ans =['10 üçï']
# 10 üçï
# 10 üçî
# 15 üçï
# 15 üçî
# 20 üçï
# 20 üçî
# 25 üçï
# 25 üçî
# 30 üçï
# 30 üçî

# print(ans[0].split())

# def validate_amount(text: str):
#     try:
#         amount = int(text)
#     except (TypeError, ValueError):
#         return None
#     if amount < 0:
#         return None
#     else:
#         return amount
#
#
# WAIT_MINUTES = ['10', '15', '20', '25', '30']
# products_postgre = np.array(query_postgre('SELECT product_name FROM product_type')).flatten()
# print(products_postgre)
#
#
# buttons = []
# for i in WAIT_MINUTES:
#     for j in products_postgre:
#         cur = i + " " + j
#         buttons.append(cur)
#
# print(buttons)



# t0 = time.time()
#     buttons_wait = []
#     t1 = time.time()
#     for i in WAIT_MINUTES:
#         for j in PRODUCT_NAME:
#             cur = i + " " + j
#             buttons_wait.append(cur)
#     t2 = time.time()
#     update.effective_message.reply_text(
#         text=text,
#         reply_markup=keyboard_from_list(buttons_wait, 2),
#     )
#     t3 = time.time()
#
#     print('Pgre query ',t1 - t0)
#     print('for ', t2 - t1)
#     print('mess ', t3 - t2)



# def validate_age(text: str) -> Optional[int]:
#     try:
#         age = int(text)
#     except (TypeError, ValueError):
#         return None
#
#     if age < 0 or age > 100:
#         return None
#     return age



# https://bitbucket.org/vkasatkin/tele_bot/src/master/decorators/main.py
# def log_errors(f):
#
#     def inner(*args, **kwargs):
#         try:
#             return f(*args, **kwargs)
#         except Exception as e:
#             error_message = f'[ADMIN] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
#             print(error_message)
#
#             update = args[0]
#             if update and hasattr(update, 'message'):
#                 # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
#                 update.message.bot.send_message(
#                     chat_id=MAIN_ADMIN_ID,
#                     text=error_message,
#                 )
#
#                 # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É –≤–∞—Å
#                 # chat_id = update.message.chat_id
#                 # if chat_id in ADMIN_IDS:
#                 #     update.message.reply_text(
#                 #         text=error_message,
#                 #     )
#
#             raise e
#
#     return inner

# https://bitbucket.org/vkasatkin/tele_bot/src/master/echo/utils.py
# def logger_factory(logger):
#     """ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–Ω—å—à–µ —á–µ–º –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
#         –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –∫–∞–∫–æ–π –ª–æ–≥–≥–µ—Ä –º—ã —Ö–æ—Ç–∏–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å.
#     """
#     def debug_requests(f):
#
#         @functools.wraps(f)
#         def inner(*args, **kwargs):
#
#             try:
#                 logger.debug('–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é `{}`'.format(f.__name__))
#                 return f(*args, **kwargs)
#             except Exception as e:
#                 logger.exception('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `{}`'.format(f.__name__))
#                 sentry_sdk.capture_exception(error=e)
#                 raise
#
#         return inner
#
#     return debug_requests




# def stop_list_add_write(update, context):
#     query = update.callback_query
#     provision = query.data
#     context.user_data[PROVISION_DATA_STOP] = provision
#     try:
#         result_write = stop_list_add(context.user_data[ID_USER_DATA_STOP], provision,
#                                      context.user_data[WHALE_DATA_STOP], None)
#         if result_write.isdigit():
#             query.edit_message_text(
#                 text=('–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ —Å—Ç–æ–ø: {}\n'
#                       '–¢–æ—á–∫–∞: {}\n'
#                       '–°–ª–µ–¥.–¥–µ–π—Å—Ç–≤–∏–µ:'.format(context.user_data[PROVISION_DATA_STOP],
#                                               context.user_data[WHALE_DATA_STOP])),
#                 # reply_markup=keyboard_stoplist_provision(provisions_available),
#             )
#         else:
#             context.bot.sendMessage(
#                 chat_id=ERROR_ADMIN_ID,
#                 text=str(result_write) + str(' –æ—à–∏–±–∫–∞ add_write')
#             )
#             update.effective_message.reply_text(
#                 text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ –Ω–µ–π —Å–æ–æ–±—â–µ–Ω–æ. –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω',
#                 reply_markup=keyboard_start())
#             return ConversationHandler.END
#     except:
#         context.bot.sendMessage(
#             chat_id=ERROR_ADMIN_ID,
#             text='STOP: –æ—à–∏–±–∫–∞ –≤ stop_list_add_write - –∑–∞–ø–∏—Å–∏ –≤ stop –ª–∏—Å—Ç'
#         )
#         update.effective_message.reply_text(
#             text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ –Ω–µ–π —Å–æ–æ–±—â–µ–Ω–æ. –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω',
#             reply_markup=keyboard_start())
#         return ConversationHandler.END


# "message":{"message_id":8,
#   "from":{"id":1203303922,"is_bot":false,"first_name":"anton2","last_name":"sukhanov2","username":"sukhanov2","language_code":"ru"},
#   "chat":{"id":-1001367452393,"title":"test_gr","type":"supergroup"},
#   "date":1607170333,
#   "new_chat_participant":{"id":779562442,"is_bot":true,"first_name":"\ud83d\udc0b + \ud83e\udd16","username":"BW_Trouble_bot"},
#   "new_chat_member":{"id":779562442,"is_bot":true,"first_name":"\ud83d\udc0b + \ud83e\udd16","username":"BW_Trouble_bot"},
#   "new_chat_members":[{"id":779562442,"is_bot":true,"first_name":"\ud83d\udc0b + \ud83e\udd16","username":"BW_Trouble_bot"}]}}]}