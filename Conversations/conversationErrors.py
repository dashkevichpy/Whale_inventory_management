import urllib.parse
import logging

import numpy as np
from telegram import ParseMode
from telegram.ext import MessageHandler
from telegram.ext import ConversationHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import Filters
# import telegramcalendar
from class_StartKeyboard import keyboard_start
from decorators import check_group
from keyboards import keyboard_yes_no, keyboard_accept_read, keyboard_from_list, keyboard_cancel_error

from gSheet import insert_entry_errors_gs

import os
from dotenv import load_dotenv

load_dotenv()
CHAT_TIMEOUT = int(os.getenv('CHAT_TIMEOUT'))
ERROR_ADMIN_ID = os.getenv('ERROR_ADMIN_ID')

from keyboards import BUTTON_ERROR_TITLE, BUTTON_ERROR_CANCEL

# –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –æ—à–∏–±–∫–∞–º–∏
from postgres import query_postgre, get_stores_open

# –∫–æ–Ω–∏, –ª—é–¥–∏: —Ç—É—Ç —Å–º–µ—à–∞–Ω—ã –∏ –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –∏ –∏–Ω–¥–µ–∫—Å—ã, —É–∂–∞—Å–Ω–æ
ID_USER_CHAT_ERROR, USER_NAME_ERROR, WHICH_POST, WHAT_ERROR, WHAT_LOCATION, DATE_ERROR, DETAIL_COMMENT, \
CHECK_MESSAGE_ERROR, CHAT_ID_NOT1, CHAT_ID_NOT2, PHOTO_ID, ADD_PHOTO, PHOTO_FILE_ID, GET_PHOTO, ID_MESSAGE_TO_DELETE = range(15)


logging.basicConfig(level=logging.INFO, filename='app.log', filemode='w',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

s = urllib.parse.quote('clck.ru/QyYfR')

PHOTO_ERROR_TYPE = ['–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫', '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ö–æ—Ä–Ω–∏–µ–Ω–∫–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã GH']

# -------------------------ERRORS---------------------------------


@check_group
def error_start(update, context):
    context.user_data[ID_USER_CHAT_ERROR] = update.message.chat_id
    context.user_data[USER_NAME_ERROR] = update.message.from_user.username
    context.user_data[PHOTO_FILE_ID] = None
    update.message.reply_text(
        text='<b> –í—ã–±—Ä–∞–ª–∏: </b> üìØ–û—à–∏–±–∫–∞',
        reply_markup=keyboard_cancel_error(),
        parse_mode=ParseMode.HTML,
    )
    pgre = '''
                SELECT department_name
                FROM errors_departments;
    '''
    department = np.array(query_postgre(pgre)).flatten()

    update.effective_message.reply_text(
        text='–ö—Ç–æ –æ—à–∏–±—Å—è?',
        # reply_markup=keyboard_position(),
        reply_markup=keyboard_from_list(department, 2),

    )
    context.user_data[ID_MESSAGE_TO_DELETE] = update.message.message_id + 2
    return WHICH_POST


def error_type(update, context):
    query = update.callback_query
    context.user_data[WHICH_POST] = query.data
    # print('WHICH_POST - ', context.user_data[WHICH_POST])

    pgre = '''
        SELECT error_name,group_telegram_id,personal_telegram_id
        FROM error_types
        INNER JOIN errors_departments USING(id_errors_categories)
        WHERE department_name = '{}';
        '''.format(context.user_data[WHICH_POST])
    type_error = np.array(query_postgre(pgre))
    try:
        context.user_data[CHAT_ID_NOT1] = type_error[0, 1]
        context.user_data[CHAT_ID_NOT2] = type_error[0, 2]
    except:
        logging.info(f'type_error[0, 1] error in ConversError {type_error},  '
                     f'{context.user_data[WHICH_POST]} \n')
        error_cancel(update, context)

    query.edit_message_text(
        text=('<b>–û—à–∏–±–ª–∏—Å—å:</b> {}\n'
              '–¢–∏–ø –æ—à–∏–±–∫–∏:'.format(context.user_data[WHICH_POST])),
        reply_markup=keyboard_from_list(type_error[:, 0].flatten(), 2),
        parse_mode=ParseMode.HTML,
    )
    return WHAT_ERROR


def error_location(update, context):
    query = update.callback_query
    context.user_data[WHAT_ERROR] = query.data
    store_postgre = np.array(get_stores_open('store_name')).flatten()
    store_postgre = np.insert(store_postgre, len(store_postgre), 'B2B')
    query.edit_message_text(
        text=('<b>–û—à–∏–±–ª–∏—Å—å: </b>{}\n'
              '<b>–¢–∏–ø –æ—à–∏–±–∫–∏: </b>{}\n\n'
              '–¢–æ—á–∫–∞: '.format(context.user_data[WHICH_POST], context.user_data[WHAT_ERROR])),
        reply_markup=keyboard_from_list(store_postgre, 2),  # –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏
        parse_mode=ParseMode.HTML
    )
    return WHAT_LOCATION


def error_date_time(update, context):
    query = update.callback_query
    context.user_data[WHAT_LOCATION] = query.data
    query.edit_message_text(
        text=('<b>–û—à–∏–±–ª–∏—Å—å:  </b>{}\n'
              '<b>–¢–∏–ø –æ—à–∏–±–∫–∏:  </b>{}\n'
              '<b>–¢–æ—á–∫–∞:  </b>{}\n\n'
              '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É / –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: '.format(context.user_data[WHICH_POST], context.user_data[WHAT_ERROR],
                                            context.user_data[WHAT_LOCATION])),
        parse_mode=ParseMode.HTML
    )
    return DATE_ERROR


def error_comment(update, context):
    context.user_data[DATE_ERROR] = update.message.text
    if update.message.text == BUTTON_ERROR_CANCEL:
        error_cancel(update, context)
        return ConversationHandler.END
    else:
        update.effective_message.reply_text(
            text=('<b>–û—à–∏–±–ª–∏—Å—å:</b> {}\n'
                  '<b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {}\n'
                  '<b>–¢–æ—á–∫–∞:</b> {}\n'
                  '<b>–î–∞—Ç—É / –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {}\n\n'
                  '<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—à–∏–±–∫–µ </b>'.format(context.user_data[WHICH_POST], context.user_data[WHAT_ERROR],
                                                 context.user_data[WHAT_LOCATION], context.user_data[DATE_ERROR])),
            parse_mode=ParseMode.HTML
        )
        return DETAIL_COMMENT


def error_check(update, context):
    context.user_data[DETAIL_COMMENT] = update.message.text
    if context.user_data[WHAT_ERROR] in PHOTO_ERROR_TYPE and context.user_data[PHOTO_FILE_ID] is None:
    # if context.user_data[WHAT_ERROR] == '–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫' and context.user_data[PHOTO_FILE_ID] is None:
        update.effective_message.reply_text(
            text='üì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏–º?',
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_yes_no()
            )
        return ADD_PHOTO

    else:
        update.effective_message.reply_text(
            text='–°–ø–∞—Å–∏–±–æ! –í—Å–µ –≤–µ—Ä–Ω–æ?\n\n<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {}\n<b>–û—à–∏–±–∫–∞:</b> {}\n<b>–¢–æ—á–∫–∞:</b> {}\n<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {}'.format(
                context.user_data[WHICH_POST],
                context.user_data[WHAT_ERROR],
                context.user_data[WHAT_LOCATION],
                context.user_data[DATE_ERROR],
                context.user_data[DETAIL_COMMENT],
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_yes_no()
        )
        return CHECK_MESSAGE_ERROR


def error_request_photo(update, context):
    query = update.callback_query
    data = query.data
    if data == "Yes":
        query.edit_message_text(
            text='–ú–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ –±–æ—Ç üì∏',
        )
        return GET_PHOTO
    else:  # –±–µ–∑ —Ñ–æ—Ç–æ
        query.edit_message_text(
            text='–ù–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç! \n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ üëá\n\n<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {}\n<b>–û—à–∏–±–∫–∞:</b> {}\n<b>–¢–æ—á–∫–∞:</b> {}\n<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {}'.format(
                context.user_data[WHICH_POST],
                context.user_data[WHAT_ERROR],
                context.user_data[WHAT_LOCATION],
                context.user_data[DATE_ERROR],
                context.user_data[DETAIL_COMMENT],
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_yes_no()
        )
        return CHECK_MESSAGE_ERROR


def error_receive_photo(update, context):
    context.user_data[PHOTO_FILE_ID] = update.message.photo[-1].file_id

    update.effective_message.reply_text(
        text='–°–ø–∞—Å–∏–±–æ! –í—Å–µ –≤–µ—Ä–Ω–æ?\n\n<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {}\n<b>–û—à–∏–±–∫–∞:</b> {}\n<b>–¢–æ—á–∫–∞:</b> {}\n<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {}'.format(
            context.user_data[WHICH_POST],
            context.user_data[WHAT_ERROR],
            context.user_data[WHAT_LOCATION],
            context.user_data[DATE_ERROR],
            context.user_data[DETAIL_COMMENT],
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard_yes_no()
    )
    return CHECK_MESSAGE_ERROR


def error_finish(update, context):
    data = update.callback_query.data
    check_message = data
    context.user_data[CHECK_MESSAGE_ERROR] = check_message

    if data == "Yes":
        try:
            insert_entry_errors_gs(context.user_data[ID_USER_CHAT_ERROR],
                                   context.user_data[WHAT_LOCATION],
                                   context.user_data[DATE_ERROR],
                                   context.user_data[WHAT_ERROR],
                                   context.user_data[DETAIL_COMMENT],
                                   context.user_data[WHICH_POST])
            update.effective_message.reply_text(
                text='–°–ø–∞—Å–∏–±–æ!',
                reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context)
            )
            text = ('–û—à–∏–±–∫–∞:'
                    '\n\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {}'
                    '\n –û—Ç: {}'
                    '\n –¢–æ—á–∫–∞: {}'
                    '\n –¢–∏–ø –æ—à–∏–±–∫–∏: {}'
                    '\n –î–∞—Ç–∞ –æ—à–∏–±–∫–∏: {}'
                    '\n –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {}'
                    .format(context.user_data[WHICH_POST],
                            context.user_data[USER_NAME_ERROR],
                            context.user_data[WHAT_LOCATION],
                            context.user_data[DATE_ERROR],
                            context.user_data[WHAT_ERROR],
                            context.user_data[DETAIL_COMMENT],
                            )
                    )
            try:
                if context.user_data[PHOTO_FILE_ID]:
                    context.bot.send_photo(
                        chat_id=context.user_data[CHAT_ID_NOT1],
                        caption=text,
                        photo=context.user_data[PHOTO_FILE_ID]
                    )
                else:
                    context.bot.send_message(
                        chat_id=context.user_data[CHAT_ID_NOT1],
                        text=text,
                        reply_markup=keyboard_accept_read(),
                    )

                    #  -1001225063049 BM - –ö–∞—Å—Å–∏—Ä—ã




            except Exception as e:
                logging.error('insert data to table {} - –æ—à–∏–±–∫–∞ {}'.format(context.user_data[WHICH_POST], str(e)))
                context.bot.sendMessage(
                    chat_id=ERROR_ADMIN_ID,
                    text='–æ—à–∏–±–∫–∞ –±–æ—Ç–∞ –æ—à–∏–±–æ–∫: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π'
                )
        except Exception as e:
            logging.error('insert data to table {} - –æ—à–∏–±–∫–∞ {}'.format(context.user_data[WHICH_POST], str(e)))

            update.effective_message.reply_text(
                text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π',
                reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context)
            )
            context.bot.sendMessage(
                chat_id=ERROR_ADMIN_ID,
                text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∑–∞–º–µ—á–∞–Ω–∏—è {} - {}'.format(context.user_data[WHICH_POST], str(e))
            )
    if data == "No":
        update.effective_message.reply_text(
            text='–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context)
        )
    return ConversationHandler.END


def error_cancel(update, context):
    """ –û—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–ª–æ–≥–∞. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã
    """
    context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT_ERROR], message_id=context.user_data[ID_MESSAGE_TO_DELETE])
    update.message.reply_text(
        text='–í–Ω–µ—Å–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é:',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context)
    )
    return ConversationHandler.END


def timeout_callback_error(update, context):
    query = update.callback_query
    # context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT_ERROR], message_id=context.user_data[ID_MESSAGE_TO_DELETE])
    query.edit_message_text(
        text='–ü—Ä–µ—Ä–≤–∞–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏–µ üìØ –æ—à–∏–±–∫–∏, –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
    )
    update.effective_message.reply_text(
        text='–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context),
    )


def timeout_message_error(update, context):
    # context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT_ERROR], message_id=context.user_data[ID_MESSAGE_TO_DELETE])
    update.message.reply_text(
        text='–ü—Ä–µ—Ä–≤–∞–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏–µ üìØ –æ—à–∏–±–∫–∏, –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT_ERROR], context),
    )


def error_input(update, context):
    update.message.reply_text(
        text='–≤–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
    )
    return WHAT_LOCATION


def wrong_input_photo(update, context):
    update.message.reply_text(
        text='üòì —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –∞ –Ω–∞–¥–æ —Ñ–æ—Ç–æ. –ï—â—ë —Ä–∞–∑–æ–∫',
    )
    return GET_PHOTO


def add_observer_error(dispatcher):
    dispatcher.add_handler(ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(BUTTON_ERROR_TITLE), error_start, pass_user_data=True)],

        states={
            WHICH_POST: [CallbackQueryHandler(error_type, pass_user_data=True)],
            WHAT_ERROR: [CallbackQueryHandler(error_location, pass_user_data=True),
                         MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True)],

            WHAT_LOCATION: [CallbackQueryHandler(error_date_time, pass_user_data=True),
                            MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True),
                            MessageHandler(Filters.text, error_input, pass_user_data=True)],

            DATE_ERROR: [MessageHandler(Filters.text, error_comment, pass_user_data=True),
                         MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True)],

            DETAIL_COMMENT: [MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True),
                             MessageHandler(Filters.text, error_check, pass_user_data=True)],

            ADD_PHOTO: [CallbackQueryHandler(error_request_photo, pass_user_data=True),
                        MessageHandler(Filters.text, error_input, pass_user_data=True)],

            GET_PHOTO: [MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True),
                        MessageHandler(~Filters.photo, wrong_input_photo,  pass_user_data=True),
                        MessageHandler(Filters.photo, error_receive_photo,  pass_user_data=True)],

            CHECK_MESSAGE_ERROR: [CallbackQueryHandler(error_finish, pass_user_data=True)],

            ConversationHandler.TIMEOUT:
                [CallbackQueryHandler(timeout_callback_error, pass_job_queue=True, pass_update_queue=True),
                 MessageHandler(Filters.text | Filters.command, timeout_message_error)],
        },
        # fallbacks=[CommandHandler('cancel_error', error_cancel)]
        fallbacks=[MessageHandler(Filters.regex(BUTTON_ERROR_CANCEL), error_cancel, pass_user_data=True)],
        conversation_timeout=CHAT_TIMEOUT
    ))


