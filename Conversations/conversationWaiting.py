import numpy as np
from telegram import ParseMode
from telegram.ext import ConversationHandler, MessageHandler, CallbackQueryHandler, Filters
import time

from class_StartKeyboard import keyboard_start
import os
from dotenv import load_dotenv

load_dotenv()
ERROR_ADMIN_ID = os.getenv('ERROR_ADMIN_ID')
TG_GROUP_NAMES = eval(os.getenv('TG_GROUP_NAMES'))
OPERATION_BM = os.getenv('OPERATION_BM')
CASHIER_TG = os.getenv('CASHIER_TG')
CHAT_TIMEOUT = int(os.getenv('CHAT_TIMEOUT'))
from decorators import check_group
from keyboards import BUTTON_WHAT_WHALE, keyboard_cancel_choose_whale, keyboard_from_list, BUTTON_CHOOSE_WHALE_CANCEL, \
    BUTTON_WAIT_TITLE, keyboard_cancel_wait, BUTTON_WAIT_CANCEL, BUTTON_REMOVE_WAIT
from postgres import query_postgre
import logging
logging.basicConfig(level=logging.INFO, filename='app.log', filemode='w',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ID_USER_CHAT, WHAT_WHALE, OPEN_SESSIONS, WAIT = range(4)
WRITE_WAIT = range(1)

WAIT_MINUTES = ['15', '20', '30', '45']
# PRODUCT_NAME = ['üçï', 'üçî']
PRODUCT_NAME_WAITING = ['üçï', 'üçî', 'üöö']
PRODUCT_NAME = PRODUCT_NAME_WAITING[0:2]


@check_group
def wait_start(update, context):
    context.user_data[ID_USER_CHAT] = update.message.chat_id
    query_db = """SELECT store_name
                            FROM employee_in_store
                            INNER JOIN store USING(id_store)
                            WHERE chat_id_telegram = '{}'
                    """.format(context.user_data[ID_USER_CHAT])
    whale_store = np.array(query_postgre(query_db))
    if whale_store.size > 0:
        context.user_data[WHAT_WHALE] = whale_store[0, 0]
        update.effective_message.reply_text(
            text='–í—ã–±—Ä–∞–ª–∏ \n' + BUTTON_WAIT_TITLE,
            reply_markup=keyboard_cancel_wait(),
        )

        #  create buttons
        buttons_wait = []
        for i in WAIT_MINUTES:
            for j in PRODUCT_NAME:
                cur = i + " " + j
                buttons_wait.append(cur)

        query_db = '''
            SELECT now_wait, product_name, id_wait_session, max_wait
            FROM wait_session
            INNER JOIN store USING(id_store)
            WHERE store_name = '{}' and
                  end_wait is NULL and
                  product_name = ANY('{prod_id}');'''.format(context.user_data[WHAT_WHALE], prod_id='{üçî,üçï}')

        context.user_data[OPEN_SESSIONS] = np.array(query_postgre(query_db))
        if len(context.user_data[OPEN_SESSIONS]) > 0:
            text = "–°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–Ω–∏–µ –≤ " + context.user_data[WHAT_WHALE] + '\n'
            remove_wait = [" " for _ in range(len(PRODUCT_NAME))]
            for i in context.user_data[OPEN_SESSIONS]:
                text = text + i[0] + " " + i[1] + '\n'
                index_prod = PRODUCT_NAME.index(i[1])
                remove_wait[index_prod] = BUTTON_REMOVE_WAIT + " " + i[1]
            remove_wait.extend(buttons_wait)
            buttons_wait = remove_wait
        else:
            text = "–û–∂–∏–¥–∞–Ω–∏—è –≤ " + context.user_data[WHAT_WHALE] + ' –Ω–µ—Ç\n'

        update.effective_message.reply_text(
            text=text + "–ø–æ–º–µ–Ω—è—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ (–≤ –º–∏–Ω.):",
            reply_markup=keyboard_from_list(buttons_wait, len(PRODUCT_NAME)),
        )
        return WRITE_WAIT
    else:
        update.message.reply_text(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–¥–µ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
        )
        return ConversationHandler.END
# ['—É–±—Ä–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ üçî', '15 üçï', '15 üçî', '20 üçï', '20 üçî', '25 üçï', '25 üçî', '30 üçï', '30 üçî', '40 üçï', '40 üçî']
# ['—É–±—Ä–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ üçï', '15 üçï', '15 üçî', '20 üçï', '20 üçî', '25 üçï', '25 üçî', '30 üçï', '30 üçî', '40 üçï', '40 üçî']

def write_wait(update, context):

    query = update.callback_query
    context.user_data[WAIT] = query.data

    wait_min = context.user_data[WAIT].split()[0]
    product = context.user_data[WAIT].split()[1]
    id_wait_session, max_wait, text = 0, 0, " "
    if len(context.user_data[OPEN_SESSIONS]) > 0:  # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è
        logging.info('waiting -  ' + str(context.user_data[ID_USER_CHAT]) + ' –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –æ–∂–∏–¥–∞–Ω–∏–π- '  +' –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å—Ç—å '  +'\n')
        #  –Ω–∞ 1 —Ç–æ—á–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –∏—â–µ–º —Å –Ω—É–∂–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º
        for i in context.user_data[OPEN_SESSIONS]:
            if i[1] == product:  # —Å–µ—Å—Å–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —É –ø—Ä–æ–¥—É–∫—Ç–∞
                id_wait_session = i[2]
                # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
                if wait_min == BUTTON_REMOVE_WAIT:
                    text = BUTTON_REMOVE_WAIT + " " + product + "–≤ " + context.user_data[WHAT_WHALE]
                    # –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                    q_close_wait_session = '''
                            SET TIMEZONE='posix/Asia/Krasnoyarsk';
                             UPDATE wait_session
                             SET end_wait = date_trunc('minute', now()), duration_wait = date_trunc('minute', (NOW() - begin_wait)), now_wait = 0
                             WHERE id_wait_session = {}
                         '''.format(id_wait_session)
                    query_postgre(q_close_wait_session)
                    # –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º entry
                    q_wait_entry ='''
                        SET TIMEZONE='posix/Asia/Krasnoyarsk';  
                        INSERT INTO wait_entry (date_time, wait_min, id_wait_session) VALUES
                        (date_trunc('minute', now()) ,{},{});
                    '''.format(0, id_wait_session)
                    query_postgre(q_wait_entry)

                # —Å–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                else:
                    text = '–ò–∑–º–µ–Ω–∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ ' + product + "–Ω–∞ " + wait_min + " " +context.user_data[WHAT_WHALE]
                    max_wait = i[3] if i[3] > wait_min else wait_min
                    q_update_session = '''
                        UPDATE wait_session
                        SET max_wait = {}, now_wait = {}
                        WHERE id_wait_session = {}'''.format(max_wait, wait_min, id_wait_session)
                    query_postgre(q_update_session)
                    q_wait_entry = '''
                        SET TIMEZONE='posix/Asia/Krasnoyarsk';
                        INSERT INTO wait_entry (date_time, wait_min, id_wait_session) 
                        VALUES (date_trunc('minute', now()) ,{},{});
                        '''.format(wait_min, id_wait_session)
                    query_postgre(q_wait_entry)
                break
    # —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç.–µ. –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    if len(context.user_data[OPEN_SESSIONS]) == 0 or id_wait_session == 0:
        text = '–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ ' + product + '–Ω–∞ ' + wait_min + " " +context.user_data[WHAT_WHALE]
        q_new_wait_session = '''
            SET TIMEZONE='posix/Asia/Krasnoyarsk';
            INSERT INTO wait_session (begin_wait, id_store, max_wait, product_name, now_wait)
            SELECT date_trunc('minute', now()), store.id_store, {}, '{}',{}
            FROM store
            WHERE store.store_name = '{}'
            RETURNING id_wait_session'''.format(wait_min, product, wait_min,context.user_data[WHAT_WHALE])
        # id_wait_session = query_postgre(q_new_wait_session)[0]
        id_wait_session = np.array(query_postgre(q_new_wait_session))[0, 0]
        q_wait_entry = '''
            SET TIMEZONE='posix/Asia/Krasnoyarsk';
            INSERT INTO wait_entry (date_time, wait_min, id_wait_session) VALUES
            (date_trunc('minute', now()) ,{},{});'''.format(wait_min, id_wait_session)
        query_postgre(q_wait_entry)
    query.edit_message_text(text=text)
    update.effective_message.reply_text(
        text=('–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é'),
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
    )
    context.bot.sendMessage(chat_id=TG_GROUP_NAMES[OPERATION_BM], text=text)
    context.bot.sendMessage(chat_id=TG_GROUP_NAMES[CASHIER_TG], text=text)
    return ConversationHandler.END


def wait_cancel(update, context):
    update.message.reply_text(
        text='–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
    )
    return ConversationHandler.END


def timeout_callback_wait(update, context):
    query = update.callback_query
    query.edit_message_text(
        text='–ü—Ä–µ—Ä–≤–∞–ª–∏ ‚è≥–û–∂–∏–¥–∞–Ω–∏–µ, –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
        # reply_markup=keyboard_start(context.user_data[ID_USER_DATA_STOP])
    )
    update.effective_message.reply_text(
        text='–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context),
    )

def timeout_message_wait(update, context):
    update.message.reply_text(
        text='–ü—Ä–µ—Ä–≤–∞–ª–∏ ‚è≥–û–∂–∏–¥–∞–Ω–∏–µ, –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
    )


def conversation_waiting(dispatcher):
    dispatcher.add_handler(ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(BUTTON_WAIT_TITLE), wait_start, pass_user_data=True)],

        states={
            WRITE_WAIT: [CallbackQueryHandler(write_wait, pass_user_data=True)],
            ConversationHandler.TIMEOUT: [
                CallbackQueryHandler(timeout_callback_wait, pass_job_queue=True, pass_update_queue=True),
                MessageHandler(Filters.text | Filters.command, timeout_message_wait)],
        },
        fallbacks=[MessageHandler(Filters.regex(BUTTON_WAIT_CANCEL), wait_cancel, pass_user_data=True)],
        conversation_timeout=CHAT_TIMEOUT
    ))
