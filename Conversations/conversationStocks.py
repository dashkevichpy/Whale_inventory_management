import gc
from datetime import datetime
from typing import Union
import pytz
from tabulate import tabulate
from telegram import ParseMode
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, Filters, CommandHandler

from Conversations.conversationChooseWhale import reset_store_employee
from Whale_inventory_management.class_WhaleSheet import InventSheet, INVENT_SHEET_NAME, WriteOffSheet, WriteOffType, \
    wr_off_init, ACCEPTANCE_SHEET_NAME, MORNING_INVENT_SHEET_NAME
from Whale_inventory_management.invent_postgres import pg_insert_fake_write_off, pg_get_invent_template, \
    pg_get_acceptance_whale_template
from Whale_inventory_management.report_and_check import check_write_off_done, check_invent_done, check_completed_invent, \
    check_invent_acceptance_done, check_invent_morning_done
from class_StartKeyboard import keyboard_start, Employee
import os
from dotenv import load_dotenv

load_dotenv()
CHAT_TIMEOUT = int(os.getenv('CHAT_TIMEOUT'))
ERROR_ADMIN_ID = os.getenv('ERROR_ADMIN_ID')
TIME_ZONE = os.getenv('TIME_ZONE')
STOCK_CLOSING_START = os.getenv('STOCK_CLOSING_START')
STOCK_CLOSING_END = os.getenv('STOCK_CLOSING_END')


from keyboards import BUTTON_STOCKS, BUTTON_CANCEL_CONVERSATION, keyboard_cancel_conversation, \
    keyboard_from_list
from enum import Enum
from collections import namedtuple

from postgres import pg_get_employee_in_store
import logging


logging.basicConfig(level=logging.INFO, filename='appStock.log', filemode='w',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

DISPATCH_HANDLER = range(1)
ID_MESSAGE_TO_DELETE, SERVICE_MESSAGE, ID_USER_CHAT = range(3)
ADMIN_STOCK_TEL_ID = []
# 189198380

BUTTON_INVENT = "üßÆ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é"
BUTTON_WRITE_OFF = "üóë –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ø–∏—Å–∞–Ω–∏–µ"
BUTTON_TMRR_WRITE_OFF = "üìÖ –æ—Ç—Ä–∞–≤–∏—Ç—å –ó–∞–≤—Ç—Ä–∞ —Å–ø–∏—Å–∞–Ω–∏–µ"
BUTTON_MORNING_INVENT = "‚òÄÔ∏è–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –£—Ç—Ä–æ –∏–Ω–≤–µ–Ω—Ç"
BUTTON_WRITE_OFF_REJECTION = "–ù–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–π"
BUTTON_SHIPMENT_ACCEPTANCE = "üì¶ –ü—Ä–∏–Ω—è—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫—É"
BUTTON_ADD_STOP_LIST = "‚õî –°—Ç–æ–ø"


START_STOCK_EVENING_TIME = datetime.strptime(STOCK_CLOSING_START, "%H:%M:%S")
END_STOCK_EVENING_TIME = datetime.strptime(STOCK_CLOSING_END, "%H:%M:%S")

START_SHIPMENT_ACCEPTANCE_TIME = datetime.strptime("08:00:00", "%H:%M:%S")
END_SHIPMENT_ACCEPTANCE_TIME = datetime.strptime("15:00:00", "%H:%M:%S")

START_STOCK_MORNING_TIME = datetime.strptime("08:00:00", "%H:%M:%S")
END_STOCK_MORNING_TIME = datetime.strptime("11:00:00", "%H:%M:%S")  # –ø–æ–º–µ–Ω—Ç—å –≤—Ä–µ–º—è

StockEvent = namedtuple('StockEvent', ('button', 'time_start', 'time_end', 'check_func'))
StockKeyboardText = namedtuple('StockKeyboardText', {'text', 'keyboard'})

class StockEventList(Enum):
    INVENT = StockEvent(BUTTON_INVENT, START_STOCK_EVENING_TIME, END_STOCK_EVENING_TIME, check_invent_done)
    WRITE_OFF = StockEvent(BUTTON_WRITE_OFF, START_STOCK_EVENING_TIME, END_STOCK_EVENING_TIME, check_write_off_done)
    TMRR_WRITE_OFF = StockEvent(BUTTON_TMRR_WRITE_OFF, START_STOCK_EVENING_TIME, END_STOCK_EVENING_TIME, None)
    WRITE_OFF_REJECTION = StockEvent(BUTTON_WRITE_OFF_REJECTION, START_STOCK_EVENING_TIME, END_STOCK_EVENING_TIME, None)
    SHIPMENT_ACCEPTANCE = StockEvent(BUTTON_SHIPMENT_ACCEPTANCE, START_SHIPMENT_ACCEPTANCE_TIME,
                                     END_SHIPMENT_ACCEPTANCE_TIME, check_invent_acceptance_done)

    MORNING_INVENT = StockEvent(BUTTON_MORNING_INVENT, START_STOCK_MORNING_TIME,
                                     END_STOCK_MORNING_TIME, check_invent_morning_done)


def event_now(empl: Employee) -> dict:
    '''
        –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—èn —Å–µ–π—á–∞—Å
    :return:
    '''
    now = datetime.now(tz=pytz.timezone(TIME_ZONE))
    list_button = {}
    for e in StockEventList:
        fl_add_button = False  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞

        if e.value.time_start.time() > e.value.time_end.time():  # –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–æ –∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            if now.time() >= e.value.time_start.time() or now.time() <= e.value.time_end.time():
                fl_add_button = True
        else:
            if e.value.time_start.time() <= now.time() <= e.value.time_end.time():
                fl_add_button = True

        if fl_add_button:
            if e.value.check_func:
                list_button[e.value.button] = e.value.check_func(empl)
            else:
                list_button[e.value.button] = True
    return list_button


def keyboard_stock(context) -> Union[StockKeyboardText, None]:
    empl = context.user_data['employee']
    buttons = event_now(empl)
    if not buttons:
        return None
    text_header = f'–ó–∞–ø–∞—Å—ã –¥–ª—è {empl.store_name}\n\n'
    text = ''
    # –µ—Å–ª–∏ —É–∂–µ –≤–Ω–µ—Å–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∫–æ–Ω–ø–∫—É "–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    if BUTTON_INVENT in buttons.keys():
        if buttons[BUTTON_INVENT]:  # –∏–Ω–≤–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            del buttons[BUTTON_INVENT]
            text = '–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∞–Ω–∏—è'

    # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ —Å–ø–∏—Å–∞–Ω–∏—è –Ω–∏ –∏–Ω–≤–µ–Ω—Ç–∞ - —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    if BUTTON_WRITE_OFF in buttons.keys() and BUTTON_INVENT in buttons.keys():  # —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω–≤–µ–Ω—Ç –µ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if not buttons[BUTTON_WRITE_OFF] and not buttons[BUTTON_INVENT]:  # –∏–Ω–≤–µ–Ω—Ç –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            del buttons[BUTTON_INVENT]
            text = '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ'

    #  –µ—Å–ª–∏ —É–∂–µ –≤–Ω–æ—Å–∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ"
    if BUTTON_WRITE_OFF in buttons.keys() and BUTTON_WRITE_OFF_REJECTION in buttons.keys():
        if buttons[BUTTON_WRITE_OFF]:  # –µ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ
            del buttons[BUTTON_WRITE_OFF_REJECTION]

    #  –µ—Å–ª–∏ —É–∂–µ –≤–Ω–æ—Å–∏–ª–∏ –ø—Ä–∏–µ–º –Ω–∞–∫–ª–∞–¥–Ω–æ–π - —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–º–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"
    if BUTTON_SHIPMENT_ACCEPTANCE in buttons.keys():
        if buttons[BUTTON_SHIPMENT_ACCEPTANCE]:
            del buttons[BUTTON_SHIPMENT_ACCEPTANCE]

    #  –µ—Å–ª–∏ —É–∂–µ –≤–Ω–æ—Å–∏–ª–∏ —É—Ç—Ä–µ–Ω–Ω—é—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
    if BUTTON_MORNING_INVENT in buttons.keys():
        if buttons[BUTTON_MORNING_INVENT]:
            del buttons[BUTTON_MORNING_INVENT]

    if not buttons:
        return None
    text = f'{text_header}' + text
    return StockKeyboardText(text=text, keyboard=keyboard_from_list(list(buttons.keys()), 1))


# @check_group
def start_stock_conversation(update, context):
    context.user_data[ID_USER_CHAT] = update.message.chat_id
    logging.info(f'start_stock_conversation {update.message.chat_id} \n')
    store_name = pg_get_employee_in_store(update.message.chat_id)  # –æ—Ç–º–µ—Ç–∏–ª –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ—á–∫—É, –≥–¥–µ —Å–µ–π—á–∞—Å
    if not store_name:
        update.message.reply_text(
            text='–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—à—å',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
        )
        return ConversationHandler.END

    update.message.reply_text(
        text=f"–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è –≤\n<b>{context.user_data['employee'].store_name}</b>?\n"
             f"–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–º–µ–Ω—è–π —Ç–æ—á–∫—É /reset_store",
        reply_markup=keyboard_cancel_conversation(),
        parse_mode=ParseMode.HTML,
    )

    stock_keyb_text = keyboard_stock(context)

    if not stock_keyb_text:
        update.message.reply_text(
            text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
        )
        return ConversationHandler.END

    update.message.reply_text(
        text=stock_keyb_text.text,
        reply_markup=stock_keyb_text.keyboard
    )
    context.user_data[ID_MESSAGE_TO_DELETE] = [update.message.message_id + 1,  update.message.message_id + 2]
    context.user_data[SERVICE_MESSAGE] = None
    return DISPATCH_HANDLER


def stock_dispatch_handler(update, context):

    query = update.callback_query
    query.edit_message_text(
        text="‚è≥ –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
    )
    emp = context.user_data['employee']
    logging.info(f'press {query.data} {context.user_data[ID_USER_CHAT]}, store -{emp.store_name}, '
                 f'dept - {emp.department_code}  \n')

    # –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
    if query.data == BUTTON_INVENT:
        if check_invent_done(context.user_data['employee']):
            query.answer(text='‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –≤–Ω–µ—Å–µ–Ω–∞', show_alert=True)
            text = '\n‚ùå –∏–Ω–≤–µ–Ω—Ç –≤–Ω–µ—Å–µ–Ω–∞'
        else:
            invent_whale_sheet = InventSheet(em=emp, sheet=INVENT_SHEET_NAME,
                                             func_get_nomenclature=pg_get_invent_template, invent_type=None)
            if invent_whale_sheet.get_result():
                query.answer(text='üôå –û—Ç–ª–∏—á–Ω–æ, –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∞', show_alert=True)
                text = '\n‚úîÔ∏è–∏–Ω–≤–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
                incompleted_invent = check_completed_invent()
                if incompleted_invent:  # –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    table_inc = tabulate(incompleted_invent, tablefmt="rst")
                    context.bot.sendMessage(chat_id=ERROR_ADMIN_ID,
                                            text='üì® –ó–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç {store_name} - {dept} –æ—Å—Ç–∞–ª–æ—Å—å –µ—â—ë \n {inc}'.
                                            format(store_name=emp.store_name, dept=emp.department_code, inc=table_inc))
                else:  # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏–Ω–≤–µ–Ω—Ç—ã
                    context.bot.sendMessage(chat_id=ERROR_ADMIN_ID, text='üéâ –í—Å–µ –∏–Ω–≤–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã')
            else:
                query.answer(text='‚ùå –ß—Ç–æ-—Ç–æ –≤–Ω–µ—Å–ª–∏ –Ω–µ —Ç–∞–∫ü§®, —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', show_alert=True)
                text = '\n‚ùå –æ—à–∏–±–∫–∞ –∏–Ω–≤–µ–Ω—Ç'
            del invent_whale_sheet
            gc.collect()

    # —Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
    elif query.data == BUTTON_WRITE_OFF:
        write_off = wr_off_init(em=emp, write_off_type=WriteOffType.WRITE_OFF_TODAY, wb=None)
        w_result = write_off.get_result()
        if w_result is None:
            query.answer(text='üôÑ –ù–µ—á–µ–≥–æ –≤–Ω–æ—Å–∏—Ç—å –≤ —Å–ø–∏—Å–∞–Ω–∏–µ', show_alert=True)
            text = '\n - –≤ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—á–µ–≥–æ –≤–Ω–æ—Å–∏—Ç—å'
        elif w_result:
            query.answer(text='üëç –°–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–æ', show_alert=True)
            text = '\n‚úîÔ∏è—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        else:
            query.answer(text='‚ùå –û—à–∏–±–∫–∞ –≤ –ª–∏—Å—Ç–µ –°–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–ª–æ–Ω–∫–∞ –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',show_alert=True)
            text = '\n‚ùå –æ—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è'
        del write_off
        gc.collect()

    # —Å–µ–≥–æ–¥–Ω—è —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ
    elif query.data == BUTTON_WRITE_OFF_REJECTION:  # –µ—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –≤–Ω–æ—Å–∏–º –º–Ω–∏–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        pg_insert_fake_write_off(emp.id_store, emp.department_code)
        text = '\n‚ö† —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ'

    # —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
    elif query.data == BUTTON_TMRR_WRITE_OFF:
        text = f'\n\n {BUTTON_TMRR_WRITE_OFF} –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–∑–∂–µ'

        # write_off_tmrr = wr_off_init(em=emp, write_off_type=WriteOffType.WRITE_OFF_TMRR, wb=None)
        # w_result = write_off_tmrr.get_result()
        # if w_result is None:
        #     query.answer(text='üôÑ –ù–µ—á–µ–≥–æ –≤–Ω–æ—Å–∏—Ç—å –≤ —Å–ø–∏—Å–∞–Ω–∏–µ', show_alert=True)
        #     text = '\n - –≤ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—á–µ–≥–æ –≤–Ω–æ—Å–∏—Ç—å'
        # elif w_result:
        #     query.answer(text='üëç –°–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–æ', show_alert=True)
        #     text = '\n‚úîÔ∏è—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        # else:
        #     query.answer(text='‚ùå –û—à–∏–±–∫–∞ –≤ –ª–∏—Å—Ç–µ –°–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–ª–æ–Ω–∫–∞ –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', show_alert=True)
        #     text = '\n‚ùå –æ—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è'
        # del write_off_tmrr
        # gc.collect()

    # –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    elif query.data == BUTTON_SHIPMENT_ACCEPTANCE:
        invent_whale_sheet = InventSheet(em=emp, sheet=ACCEPTANCE_SHEET_NAME,
                                         func_get_nomenclature=pg_get_acceptance_whale_template, invent_type='acceptance')
        if invent_whale_sheet.get_result():
            query.answer(text='üôå –ü—Ä–∏–µ–º–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–Ω–µ—Å–µ–Ω–∞', show_alert=True)
            text = '\n‚úîÔ∏è–ø—Ä–∏–µ–º–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            context.bot.sendMessage(chat_id=ERROR_ADMIN_ID, text='üì¶ –ü—Ä–∏–µ–º–∫–∞ –≤–Ω–µ—Å–µ–Ω–∞ {dept} - {store_name}'.
                                    format(store_name=emp.store_name, dept=emp.department_code))
        else:
            query.answer(text='‚ùå –ß—Ç–æ-—Ç–æ –≤–Ω–µ—Å–ª–∏ –Ω–µ —Ç–∞–∫ü§®, —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', show_alert=True)
            text = '\n‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∫–∞'
        del invent_whale_sheet
        gc.collect()

    # –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —É—Ç—Ä–æ
    elif query.data == BUTTON_MORNING_INVENT:
        invent_whale_sheet = InventSheet(em=emp, sheet=MORNING_INVENT_SHEET_NAME,
                                         func_get_nomenclature=pg_get_acceptance_whale_template,
                                         invent_type='morning')
        if invent_whale_sheet.get_result():
            query.answer(text='‚òÄÔ∏è–£—Ç—Ä–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∞', show_alert=True)
            text = '\n‚úîÔ∏è—É—Ç—Ä–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∞'
            context.bot.sendMessage(chat_id=ERROR_ADMIN_ID, text='‚òÄÔ∏è–£—Ç—Ä–æ –∏–Ω–≤–µ–Ω—Ç –≤–Ω–µ—Å–µ–Ω–∞ {dept} - {store_name}'.
                                    format(store_name=emp.store_name, dept=emp.department_code))
        else:
            query.answer(text='‚ùå –ß—Ç–æ-—Ç–æ –≤–Ω–µ—Å–ª–∏ –Ω–µ —Ç–∞–∫ü§®, —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', show_alert=True)
            text = '\n‚ùå –æ—à–∏–±–∫–∞ —É—Ç—Ä–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è'
        del invent_whale_sheet
        gc.collect()

    else:
        return ConversationHandler.END

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    stock_keyb_text = keyboard_stock(context)
    # –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–∏–∞–ª–æ–≥–∞ –≤—Ä–µ–º—è –≤—ã—à–ª–æ –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, —Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–µ–µ—Ä–Ω—ë—Ç None
    if not stock_keyb_text:
        update.message.reply_text(
            text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
        )
        return ConversationHandler.END

    context.user_data[SERVICE_MESSAGE] = update.callback_query.message.text + text

    query.edit_message_text(
        text=context.user_data[SERVICE_MESSAGE],
        reply_markup=stock_keyb_text.keyboard,
    )
    return DISPATCH_HANDLER


def stock_cancel(update, context):

    logging.info(f'press stock_cancel —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ {context.user_data[ID_MESSAGE_TO_DELETE]} \n')

    for mes_id in context.user_data[ID_MESSAGE_TO_DELETE]:
        try:
            context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT], message_id=mes_id)
        except:
            logging.error(f'–æ—à–∏–±–∫–∞ stock - —É–¥–∞–ª–µ–Ω–∏–µ {context.user_data[ID_USER_CHAT]}    -   \n')
            return ConversationHandler.END


    if not context.user_data[SERVICE_MESSAGE]:
        context.user_data[SERVICE_MESSAGE] = f'–ü—Ä–µ—Ä–≤–∞–ª–∏ ,\n{BUTTON_STOCKS}'
    update.message.reply_text(
        text=f' {context.user_data[SERVICE_MESSAGE]}\n\n–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ c—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context)
    )
    return ConversationHandler.END


def stock_timeout_callback(update, context):
    query = update.callback_query
    query.edit_message_text(
        text=f'–ü—Ä–µ—Ä–≤–∞–ª–∏ ,\n{BUTTON_STOCKS} - –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
    )
    update.effective_message.reply_text(
        text='–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context),
    )


def stock_timeout_message(update, context):
    for mes_id in context.user_data[ID_MESSAGE_TO_DELETE]:
        context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT], message_id=mes_id)
    update.message.reply_text(
            text=f'–ü—Ä–µ—Ä–≤–∞–ª–∏ ,\n{BUTTON_STOCKS} - –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π',
            reply_markup=keyboard_start(context.user_data[ID_USER_CHAT], context),
    )


def stock_reset_store(update, context):
    for mes_id in context.user_data[ID_MESSAGE_TO_DELETE]:
        context.bot.delete_message(chat_id=context.user_data[ID_USER_CHAT], message_id=mes_id)
    reset_store_employee(update, context)  # –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –∏–∑ –ë–î –∑–∞–ø–∏—Å—å –æ —Ç–æ–º –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    return ConversationHandler.END


def conversation_stocks(dispatcher):
    dispatcher.add_handler(ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(BUTTON_STOCKS), start_stock_conversation, pass_user_data=True)],

        states={
            DISPATCH_HANDLER: [CallbackQueryHandler(stock_dispatch_handler, pass_user_data=True)],
            # WRITE: [CallbackQueryHandler(register_write, pass_user_data=True)],
            ConversationHandler.TIMEOUT: [CallbackQueryHandler(stock_timeout_callback, pass_job_queue=True, pass_update_queue=True),
                                          MessageHandler(Filters.text | Filters.command, stock_timeout_message)],
        },
        fallbacks=[MessageHandler(Filters.regex(BUTTON_CANCEL_CONVERSATION), stock_cancel, pass_user_data=True),
                   CommandHandler('reset_store', stock_reset_store, pass_user_data=True),
                   MessageHandler(Filters.text | Filters.command(False), stock_cancel)],
        conversation_timeout=CHAT_TIMEOUT
    ))